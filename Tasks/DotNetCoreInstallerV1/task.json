{
    "id": "B0CE7256-7898-45D3-9CB5-176B752BFEA6",
    "name": "DotNetCoreInstaller",
    "friendlyName": "Dot NET Core SDK/Runtime Installer",
    "description": "Acquires a version of the .NET Core SDK/Runtime from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.",
    "helpUrl": "",
    "helpMarkDown": "",
    "category": "Tool",
    "runsOn": [
        "Agent",
        "DeploymentGroup"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 1,
        "Minor": 0,
        "Patch": 0
    },
    "preview": "true",
    "satisfies": [
        "DotNetCore"
    ],
    "demands": [],
    "instanceNameFormat": "Use .NET Core $(packageType) $(version)",
    "groups": [
        {
            "name": "advanced",
            "displayName": "Advanced",
            "isExpanded": true
        }
    ],
    "inputs": [
        {
            "name": "packageType",
            "type": "pickList",
            "label": "Package to install",
            "defaultValue": "sdk",
            "required": true,
            "helpMarkDown": "Please select whether to install only runtime or full SDK.",
            "options": {
                "runtime": "Runtime",
                "sdk": "SDK (contains runtime)"
            }
        },
        {
            "name": "includePreviewVersions",
            "type": "boolean",
            "label": "Include Preview Versions",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "Kindly select if you want preview versions to be included while searching for versions, such as while searching 2.2.x. This need not be checked if you are specifing exact version, such as: 2.1.403"
        },
        {
            "name": "version",
            "type": "string",
            "label": "Version",
            "defaultValue": "2.2.x",
            "required": true,
            "helpMarkDown": "Specify version of .NET Core SDK or runtime to install.<br/>Versions can be given in the following formats<li>2.x   => Install latest in major version.</li><li>2.2.x => Install latest in major and minor version</li><li>2.2.104 => Install exact version</li><br/>Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [releases-index file.](https://github.com/dotnet/core/blob/master/release-notes/releases-index.json)."
        },
        {
            "name": "installationPath",
            "type": "string",
            "label": "Path To Install DotNet",
            "defaultValue": "$(Agent.ToolsDirectory)",
            "required": true,
            "helpMarkDown": "Specify where DotNet SDK/Runtime should be installed. Different paths can have the following impact on dotnet's behaviour (below description is in the assumption that MultiLevelLookup is disabled. If it is not disabled, globally installed dotnet versions will be always available. You can choose to enable/disable this via <b>Restrict Multi Level Lookup</b> checkbox in advanced section.)<br/><li>$(Agent.ToolsDirectory) : As ToolsDirectory is not cleaned up after each build, other versions of dotnet installed at same location in other build/release, via tool installer, will also be available when dotnet is used.</li><li>$(Agent.TempDirectory) : As the TempDirectory is cleaned after each build/release, you will only have access to the dotnet version's installed in that particular build/release.</li><li>Global dotnet installation path such as /usr/share/dotnet : This would mean that all dotnet versions installed on the machine along with version installed by tool installer will be available for this and all subsequent build/release.</li>"
        },
        {
            "name": "restrictMultiLevelLookup",
            "type": "boolean",
            "label": "Restrict Multi Level Lookup",
            "groupName": "advanced",
            "defaultValue": true,
            "required": false,
            "helpMarkDown": "The host will probe several locations to find a suitable shared framework. If a folder is not there, it will attempt to look in pre-defined global locations using multi-level lookup. The default global locations are: <br/><b>For Windows:</b><br/>C:/Program Files/dotnet (64-bit processes)<br/>C:/Program Files (x86)/dotnet<br/><b>For MacOs:</b><br/>/usr/local/share/dotnet<br/><b>For Linux:</b><br/>/usr/share/dotnet<br/><br/>Selecting it would mean your application would be built using the SDK and will consume only those runtimes, which are installed by the tool installer and not the ones installed on the machine."
        }
    ],
    "execution": {
        "Node": {
            "target": "dotnetcoreinstaller.js"
        }
    },
    "messages": {
        "ToolFailed": "Tool install failed: %s",
        "ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
        "getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
        "getDownloadUrlsFailed": "Failed to get download urls. Error: %s.",
        "UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
        "CheckingToolCache": "Checking if a cached copy exists for this version...",
        "InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
        "GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
        "CouldNotDetectPlatform": "Could not detect the machine's OS",
        "NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
        "DownloadingUrl": "Downloading .NET Core package from URL: %s",
        "ExtractingPackage": "Extracting downloaded package %s.",
        "CachingTool": "Caching this installed tool.",
        "SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
        "ToolToInstall": "Tool to install: .NET Core %s version %s.",
        "PrimaryPlatform": "Detected platform (Primary): %s",
        "LegacyPlatform": "Detected platform (Legacy): %s",
        "WarningVersionNotFound": "Could not fetch download information for version %s. Please check if the version specified is correct. You can refer the link for supported versions => https://github.com/dotnet/core/blob/master/release-notes/releases.json. Falling back to creating convention based URL.",
        "CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
        "FailedToDownloadPackage": "Failed to download package for installation",
        "PrependGlobalToolPath": "Creating global tool path and pre-prending to PATH.",
        "VersionsFileMalformed": "The specified version's download links are not correctly formed in the supported versions document => %s/"
    }
}
