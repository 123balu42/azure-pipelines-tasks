{
    "id": "B0CE7256-7898-45D3-9CB5-176B752BFEA6",
    "name": "DotNetCoreInstaller",
    "friendlyName": "Dot NET Core SDK/Runtime Installer",
    "description": "Acquires a version of the .NET Core SDK/Runtime from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.",
    "helpUrl": "",
    "helpMarkDown": "",
    "category": "Tool",
    "runsOn": [
        "Agent",
        "DeploymentGroup"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 1,
        "Minor": 0,
        "Patch": 0
    },
    "preview": "true",
    "satisfies": [
        "DotNetCore"
    ],
    "demands": [],
    "releaseNotes": "<li>Support for installing multiple versions side by side.</li><li>Support for patterns in version to fetch latest in minor/major version.</li><li>Restrict Multi-level lookup</li>",
    "instanceNameFormat": "Use .NET Core $(packageType) $(version)",
    "groups": [
        {
            "name": "advanced",
            "displayName": "Advanced",
            "isExpanded": true
        }
    ],
    "inputs": [
        {
            "name": "packageType",
            "type": "pickList",
            "label": "Package to install",
            "defaultValue": "sdk",
            "required": true,
            "helpMarkDown": "Please select whether to install only runtime or full SDK.",
            "options": {
                "runtime": "Runtime",
                "sdk": "SDK (contains runtime)"
            }
        },
        {
            "name": "version",
            "type": "string",
            "label": "Version",
            "defaultValue": "2.2.x",
            "required": true,
            "helpMarkDown": "Specify version of .NET Core SDK or runtime to install.<br/>Versions can be given in the following formats<li>2.x   => Install latest in major version.</li><li>2.2.x => Install latest in major and minor version</li><li>2.2.104 => Install exact version</li><br/>Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [releases-index file.](https://github.com/dotnet/core/blob/master/release-notes/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json"
        },
        {
            "name": "includePreviewVersions",
            "type": "boolean",
            "label": "Include Preview Versions",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "Select if you want preview versions to be included while searching for versions, such as while searching 2.2.x. This setting is ingnored if you specify an exact version, such as: 2.1.403"
        },
        {
            "name": "installationPath",
            "type": "string",
            "label": "Path To Install .Net Core",
            "defaultValue": "$(Agent.ToolsDirectory)/dotnet",
            "required": true,
            "groupName": "advanced",
            "helpMarkDown": "Specify where .Net Core SDK/Runtime should be installed. Different paths can have the following impact on dotnet's behavior.<li>Global installation path such as /usr/share/dotnet or C:\\Program Files\\Dotnet. This would cause the new version to be available machine-wide and be persisted. This requires that the agent process has permission on these folders</li><li>$(Agent.ToolsDirectory): This makes the version to be cached on the agent since this directory is not cleanup up across pipelines. All pipelines running on the agent, would have access to the versions installed previously using the agent.</li><li>$(Agent.TempDirectory): This can ensure that a pipeline doesn't use any cached version of .Net core since this folder is cleaned up after each pipeline.</li><li>Any other path: You can configure any other path given the agent process has access to the path.<br/>Note that you can also configure Multi-Level Lookup setting which can configures dotnet host's probing for a suitable version."
        },
        {
            "name": "restrictMultiLevelLookup",
            "type": "boolean",
            "label": "Restrict Multi Level Lookup",
            "groupName": "advanced",
            "defaultValue": true,
            "required": false,
            "helpMarkDown": "This configures the behavior of dontnet host process for looking up a suitable shared framework.<li>true: Only versions present in  the folder specified in this task would be looked by the host process.</li><li>false: The host will attempt to look in pre-defined global locations using multi-level lookup.<br/>The default global locations are: <br/><b>For Windows:</b><br/>C:\\Program Files\\dotnet (64-bit processes)<br/>C:\\Program Files (x86)\\dotnet (32-bit process)<br/><b>For MacOs:</b><br/>/usr/local/share/dotnet<br/><b>For Linux:</b><br/>/usr/share/dotnet<br/><br/></li> You can read more about it [HERE](https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/multilevel-sharedfx-lookup.md)."
        }
    ],
    "execution": {
        "Node": {
            "target": "dotnetcoreinstaller.js"
        }
    },
    "messages": {
        "ToolFailed": "Tool install failed: %s",
        "ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
        "getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
        "getDownloadUrlsFailed": "Failed to get download urls. Error: %s.",
        "UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
        "CheckingToolCache": "Checking if a cached copy exists for this version...",
        "InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
        "GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
        "CouldNotDetectPlatform": "Could not detect the machine's OS",
        "NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
        "DownloadingUrl": "Downloading .NET Core package from URL: %s",
        "ExtractingPackage": "Extracting downloaded package %s.",
        "CachingTool": "Caching this installed tool.",
        "SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
        "ToolToInstall": "Tool to install: .NET Core %s version %s.",
        "PrimaryPlatform": "Detected platform (Primary): %s",
        "LegacyPlatform": "Detected platform (Legacy): %s",
        "WarningVersionNotFound": "Could not fetch download information for version %s. Please check if the version specified is correct. You can refer the link for supported versions => https://github.com/dotnet/core/blob/master/release-notes/releases.json. Falling back to creating convention based URL.",
        "CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
        "FailedToDownloadPackage": "Failed to download package for installation",
        "PrependGlobalToolPath": "Creating global tool path and pre-prending to PATH.",
        "VersionsFileMalformed": "The specified version's download links are not correctly formed in the supported versions document => %s/"
    }
}